### A simple get request to the test endpoint. No need for login
GET {{url}}/auth/test/
Content-Type: application/json

### Create a new user - this one will only get a USER role by default
POST {{url}}/auth/register/
Content-Type: application/json

{
  "username": "user",
  "password": "test123"
}

### Login with the new user credentials
POST {{url}}/auth/login/
Content-Type: application/json

{
  "username": "user",
  "password": "test123"
}

> {%
    client.global.set("jwt_token", response.body.token);
    console.log("JWT Token:", client.global.get("jwt_token"));
%}

### Access USER-protected endpoint
GET {{url}}/protected/user_demo/
Accept: application/json
Authorization: Bearer {{jwt_token}}

### Attempt accessing ADMIN-protected endpoint (should fail)
GET {{url}}/protected/admin_demo/
Accept: application/json
Authorization: Bearer {{jwt_token}}

### Add admin role to user
POST {{url}}/auth/user/addrole/
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "role": "ADMIN"
}

### Re-login to get a new token with ADMIN role
POST {{url}}/auth/login/
Content-Type: application/json

{
  "username": "user",
  "password": "test123"
}

> {%
    client.global.set("jwt_token", response.body.token);
    console.log("JWT Token:", client.global.get("jwt_token"));
%}

### Now the ADMIN-protected route should work
GET {{url}}/protected/admin_demo/
Accept: application/json
Authorization: Bearer {{jwt_token}}

### Create a New Dog as ADMIN
POST {{url}}/dogs
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "name": "Test2",
  "breed": "German Shepherd",
  "age": 5,
  "status": "AVAILABLE",
  "description": "Loyal and protective"
}
